name: Django CI/CD

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: 0000
          POSTGRES_DB: postgre
        ports:
          - 5432:5432
        options: >-
          --health-cmd=pg_isready
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

      redis:
        image: redis:7
        ports:
          - 6379:6379

    env:
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      IMP_API_KEY: ${{ secrets.IMP_API_KEY }}
      IMP_API_SECRET: ${{ secrets.IMP_API_SECRET }}
      IMP_MERCHANT_ID: ${{ secrets.IMP_MERCHANT_ID }}
      POSTGRES_USER: user
      POSTGRES_PASSWORD: 0000
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_DB: postgre
      DEBUG: true
      REDIS_URL: redis://localhost:6379/1
      STATIC_ROOT: staticfiles
      DJANGO_SETTINGS_MODULE: dbre_BE.settings.local

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.12.6"

    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-

    - name: Cache mypy
      uses: actions/cache@v3
      with:
        path: .mypy_cache
        key: mypy-cache-${{ runner.os }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "export PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

    - name: Install dependencies
      run: |
        poetry config virtualenvs.in-project true
        poetry install

    - name: Run migrations
      run: |
        poetry run python manage.py makemigrations
        poetry run python manage.py migrate

    - name: Run type checking
      run: |
        poetry run mypy . --install-types --non-interactive || true
        poetry run mypy dbre_BE --strict

    - name: Run code formatting check
      run: |
        poetry run black . --check
        poetry run isort . --check-only

    - name: Run tests
      run: |
        poetry run python manage.py test

    - name: Collect static files
      run: |
        mkdir -p staticfiles
        sudo chown -R $USER:$USER staticfiles
        poetry run python manage.py collectstatic --noinput

  deploy:
    needs: [test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Deploy to NCP
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.NCP_HOST }}
          username: ${{ secrets.NCP_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script_stop: true
          script: |
            cd /root/dbre_BE
            git pull origin main
            docker-compose -f docker-compose.prod.yml down --remove-orphans
            docker system prune -f
            docker-compose -f docker-compose.prod.yml up -d --build
            
            # Health check function
            max_attempts=12  # 1분 대기 (5초 * 12)
            attempt=1
            until docker-compose -f docker-compose.prod.yml exec -T web poetry run python manage.py check > /dev/null 2>&1; do
              if [ $attempt -gt $max_attempts ]; then
                echo "Health check failed after 1 minute"
                exit 1
              fi
              echo "Waiting for web service... attempt $attempt"
              sleep 5
              attempt=$((attempt + 1))
            done

            # Run migrations only after service is healthy
            docker-compose -f docker-compose.prod.yml exec -T web poetry run python manage.py migrate --noinput