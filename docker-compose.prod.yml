services:
  nginx:
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./certbot/conf:/etc/letsencrypt  # 인증서 볼륨
      - ./certbot/www:/var/www/certbot   # 인증서 발급용 웹루트
      - ./staticfiles:/app/staticfiles
    depends_on:
      - web
    networks:
      - dbre_network
    restart: always

  # Certbot 서비스 추가
  certbot:
    image: certbot/certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - nginx
    command: certonly --webroot -w /var/www/certbot --force-renewal --email ks3610@gmail.com -d api.desub.kr --agree-tos --no-eff-email

  web:
    build: .
    env_file: .env.prod
    volumes:
      - ./dbre_BE:/app/dbre_BE
      - ./staticfiles:/app/staticfiles
    working_dir: /app
    command: >
      sh -c "
        poetry run python manage.py collectstatic --noinput &&
        poetry run gunicorn
        --workers $((2 * $(nproc) + 1))  # CPU 코어 수에 따른 워커 수 자동 설정
        --timeout 60
        --keep-alive 5
        --max-requests 1000
        --max-requests-jitter 50
        --access-logfile -
        --error-logfile -
        --log-level info
        --bind 0.0.0.0:8000
        dbre_BE.wsgi:application
      "
    deploy:
      resources:
        limits:
          cpus: '1.5'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 1G
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=db
      - REDIS_URL=redis://redis:6379/1
      - DJANGO_SETTINGS_MODULE=dbre_BE.settings.prod
      - PYTHONPATH=/app:/app/dbre_BE
      - DJANGO_ENV=prod
    healthcheck:
      test: [ "CMD", "poetry", "run", "python", "manage.py", "check" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - dbre_network
    restart: always

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5555:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - dbre_network
    restart: always

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server /usr/local/etc/redis/redis.conf
    volumes:
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf
      - redis_data:/data
    deploy:
      resources:
        limits:
          memory: 1G
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - dbre_network
    restart: always

  prometheus:
    image: prom/prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus

    networks:
      - dbre_network

  grafana:
    image: grafana/grafana
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
    depends_on:
      - prometheus
    networks:
      - dbre_network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  dbre_network:
    driver: bridge