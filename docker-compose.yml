services:
#  web:
#    build: .
#    env_file: .env.local
#    ports:
#      - "8500:8000"
#    volumes:
#      - ./dbre_BE:/app/dbre_BE
#      - ./staticfiles:/app/staticfiles
#    working_dir: /app
#    command: poetry run python manage.py runserver 0.0.0.0:8000
#    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
#      - POSTGRES_HOST=${POSTGRES_HOST}
#      - DJANGO_SETTINGS_MODULE=dbre_BE.settings.local
#      - PYTHONPATH=/app:/app/dbre_BE
#      - DJANGO_ENV=local
#      - TZ=Asia/Seoul
#    depends_on:
#      db:
#        condition: service_healthy
#    restart: always

  db:
    image: postgres:15-alpine
    env_file:
      - .env.local
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
#      - POSTGRES_USER=${POSTGRES_USER}
#      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
#      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=Asia/Seoul  # 타임존 환경변수 추가
      - PGTZ=Asia/Seoul  # PostgreSQL 전용 타임존 설정
    ports:
      - "5555:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 10s
    restart: always

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - dbre_network

networks:
  dbre_network:
    driver: bridge

volumes:
  postgres_data: